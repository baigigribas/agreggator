# This file tells Django how to configure the entire application - the "control panel"

import os
from pathlib import Path

# === PROJECT STRUCTURE SETTINGS ===

# BASE_DIR points to your project root directory
# If this file is at: backend/agg/settings.py
# Then BASE_DIR will be: backend/
BASE_DIR = Path(__file__).resolve().parent.parent

# === SECURITY SETTINGS ===

# The true key is generated by running: python -c "from django.core.management.utils import get_random_secret_key; print(get_random_secret_key())"
# stored in an env file
SECRET_KEY = os.environ.get('DJANGO_SECRET_KEY', 'fallback-for-dev-only')

# DEBUG mode shows detailed error pages - turn OFF in production
DEBUG = True

# Which domains can access your Django app?
# '*' means any domain (only use in development!)
ALLOWED_HOSTS = ['*']

# === INSTALLED APPLICATIONS ===

# This list tells Django which "apps" (components) to load
INSTALLED_APPS = [
    # Built-in Django apps (come with Django)
    'django.contrib.admin',          # Admin interface at /admin
    'django.contrib.auth',           # User authentication system
    'django.contrib.contenttypes',   # Content type framework
    'django.contrib.sessions',       # Session framework
    'django.contrib.messages',       # Messaging framework
    'django.contrib.staticfiles',    # Static file serving
    
    # Third-party apps (you need to install these)
    'rest_framework',                # Django REST Framework for APIs
    'corsheaders',                   # CORS headers for React frontend
    
    # Your custom apps
    'listings',                      # Your main app with models
]

# === MIDDLEWARE ===

# Middleware processes requests/responses in order
# Think of it as a pipeline that every request goes through
MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',           # Handle CORS for React
    'django.middleware.security.SecurityMiddleware',   # Security features
    'django.contrib.sessions.middleware.SessionMiddleware',  # Sessions
    'django.middleware.common.CommonMiddleware',       # Common functionality
    'django.middleware.csrf.CsrfViewMiddleware',      # CSRF protection
    'django.contrib.auth.middleware.AuthenticationMiddleware',  # Authentication
    'django.contrib.messages.middleware.MessageMiddleware',     # Messages
    'django.middleware.clickjacking.XFrameOptionsMiddleware',   # Clickjacking protection
]

# === URL CONFIGURATION ===

# Points to your main URL configuration file
# This should be: backend/aggregator/urls.py
ROOT_URLCONF = 'aggregator.urls'

# === TEMPLATES ===

# Configuration for HTML templates (you probably won't use this much with React)
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],  # Directories to search for templates
        'APP_DIRS': True,  # Look for templates in each app's templates/ folder
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

# === WSGI APPLICATION ===

# Points to your WSGI application (for deployment)
WSGI_APPLICATION = 'aggregator.wsgi.application'

# === DATABASE CONFIGURATION ===

# This tells Django how to connect to your PostgreSQL database
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',  # Use PostgreSQL
        'NAME': 'car_listings_db',                  # Database name (you created this)
        'USER': 'postgres',                         # PostgreSQL username
        'PASSWORD': '',                             # PostgreSQL password (usually empty in development)
        'HOST': 'localhost',                        # Where PostgreSQL is running
        'PORT': '5432',                            # PostgreSQL port
    }
}

# === CUSTOM USER MODEL ===

# Tell Django to use your custom User model instead of the default one
# This points to the User class in your listings app
AUTH_USER_MODEL = 'listings.User'

# === PASSWORD VALIDATION ===

# Rules for user passwords
AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# === INTERNATIONALIZATION ===

# Language and timezone settings
LANGUAGE_CODE = 'en-us'                    # Default language
TIME_ZONE = 'Europe/Riga'                 # Your timezone
USE_I18N = True                           # Enable internationalization
USE_TZ = True                             # Use timezone-aware datetimes

# === STATIC FILES ===

# Configuration for CSS, JavaScript, images
STATIC_URL = '/static/'                    # URL prefix for static files
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')  # Where to collect static files

# === MEDIA FILES ===

# Configuration for user-uploaded files
MEDIA_URL = '/media/'                      # URL prefix for media files
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')  # Where to store uploaded files

# === DEFAULT PRIMARY KEY TYPE ===

# What type of ID field to use for new models
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# === DJANGO REST FRAMEWORK CONFIGURATION ===

# Settings for your API
REST_FRAMEWORK = {
    # How many items to show per page in API responses
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 20,
    
    # How users authenticate with your API
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.SessionAuthentication',  # Browser sessions
        'rest_framework.authentication.TokenAuthentication',   # API tokens
    ],
    
    # Default permissions for API endpoints
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticatedOrReadOnly',  # Read for everyone, write for authenticated
    ],
}

# === CORS CONFIGURATION ===

# Allow your React frontend to access the Django API
# These are the URLs where your React app will run
CORS_ALLOWED_ORIGINS = [
    "http://localhost:3000",    # React development server
    "http://127.0.0.1:3000",   # Alternative localhost
]

# Allow cookies and authentication headers
CORS_ALLOW_CREDENTIALS = True

# === EMAIL CONFIGURATION ===

# Settings for sending notification emails
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'  # Use SMTP
EMAIL_HOST = 'smtp.gmail.com'           # Gmail SMTP server
EMAIL_PORT = 587                        # Gmail SMTP port
EMAIL_USE_TLS = True                    # Use TLS encryption
EMAIL_HOST_USER = ''                    # Your Gmail address (fill this in later)
EMAIL_HOST_PASSWORD = ''                # Your Gmail app password (fill this in later)
DEFAULT_FROM_EMAIL = 'noreply@carlistings.com'  # Default sender email

# === LOGGING CONFIGURATION ===

# Where to store Django logs
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'file': {
            'level': 'INFO',
            'class': 'logging.FileHandler',
            'filename': 'django.log',  # Log file will be created in your backend/ folder
        },
    },
    'loggers': {
        'django': {
            'handlers': ['file'],
            'level': 'INFO',
            'propagate': True,
        },
    },
}